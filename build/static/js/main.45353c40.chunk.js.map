{"version":3,"sources":["shared/lib/isEmpty.ts","shared/hooks/usePersistentState.ts","shared/lib/getBackgroundColor.ts","components/column/column.tsx","components/title/title.tsx","components/coin-card/coin-card.tsx","components/draggable-card/draggable-card.tsx","features/coins-watchlist/coins-watchlist.tsx","features/possible-coins/possible-coins.tsx","shared/config/api-config.ts","pages/coin-watcher/hooks/useCoins.ts","features/coin-charts/components/chart/hooks/useCoinHistorical.ts","features/coin-charts/components/chart/chart.tsx","features/coin-charts/coin-charts.tsx","pages/coin-watcher/coin-watcher.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["isEmpty","value","Array","isArray","length","usePersistentState","persistenceId","initialValue","useState","state","setState","useEffect","localStorage","getItem","persisted","JSON","parse","useCallback","setItem","stringify","getBackgroundColor","snapshot","draggingFromThisWith","isDraggingOver","Column","styled","div","Title","h3","CoinImage","img","CoinName","p","FlexContainer","CoinCard","item","style","Card","variant","CardContent","src","icon","alt","name","symbol","DraggableCard","index","draggableId","id","provided","ref","innerRef","draggableProps","dragHandleProps","userSelect","padding","grid","margin","backgroundColor","isDragging","CoinsWatchlist","watchedCoins","droppableId","droppableProps","map","coin","placeholder","PossibleCoins","unwatchedCoins","COIN_STATS_API","fetchCoins","a","fetch","response","ok","Error","json","coins","useCoinHistorical","coinId","useQuery","chart","fetchHistorical","Chart","data","datasetIdKey","labels","array","indexOf","datasets","label","m","borderColor","CoinCharts","watchlistCoins","POSSIBLE_COINS_ID","WATCHLIST_COINS_ID","CoinWatcherLayout","draggableStates","setUnwatchedCoins","moveCoin","result","source","destination","sourceState","setSourceState","destinationState","setDestinationState","newSourceState","splice","movedItem","newDestinationState","reorderCoin","className","display","flex","flexDirection","onDragEnd","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","queryClient","QueryClient","App","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45353c40.chunk.js","sourcesContent":["type ParamType = number | string | null | undefined | Array<any>;\n\nexport const isEmpty = (value: ParamType) => {\n    if (Array.isArray(value)) return !value.length;\n    return !value;\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport type { SetStateAction, Dispatch } from 'react';\nimport { isEmpty } from 'shared/lib/isEmpty';\n\n/**\n * This hook follows the same API as useState but it persists/hydrates its state using localStorage\n */\nexport function usePersistentState<T>(persistenceId: string, initialValue: T): [T, Dispatch<SetStateAction<T>>] {\n    const [state, setState] = useState<T>(initialValue);\n\n    useEffect(() => {\n        if (!isEmpty(persistenceId) && !isEmpty(localStorage.getItem(persistenceId))) {\n            const persisted = JSON.parse(localStorage.getItem(persistenceId)!);\n            setState(persisted);\n        }\n    }, [persistenceId]);\n\n    const setPersistentState = useCallback((value: SetStateAction<T>) => {\n        setState(value);\n        if (!isEmpty(persistenceId)) {\n            localStorage.setItem(persistenceId, JSON.stringify(value));\n        }\n    }, [persistenceId]);\n\n    return [state, setPersistentState];\n}","import type { DroppableStateSnapshot } from \"react-beautiful-dnd\";\n\nexport const getBackgroundColor = (snapshot: DroppableStateSnapshot) => {\n    // When this property is not empty this is the dragging source\n    // Using the same color for reording and marking it as the source\n    if (snapshot.draggingFromThisWith) return 'lightcyan';\n    // When this property is true show this as the target\n    if (snapshot.isDraggingOver) return 'palegreen';\n    // No dragging is happening\n    return 'white';\n}","import styled from '@emotion/styled';\n\nexport const Column = styled.div`\n    width: 300px;\n    padding: 8px;\n`;","import styled from '@emotion/styled';\n\nexport const Title = styled.h3`\n    padding: 8;\n`;","import Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport styled from '@emotion/styled';\nimport { Coin } from \"shared/types/coin\";\n\ninterface CoinCardProps {\n  item: Coin;\n  style?: Record<string, number|string>;\n}\n\nconst CoinImage = styled.img`\n  height: 24px;\n  width: 24px;\n`;\n\nconst CoinName = styled.p`\n  paddingLeft: 16px;\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flexDirection: row;\n  justifyContent: flex-start;\n  alignItems: center;\n`;\n\nexport const CoinCard = ({ item, style }: CoinCardProps) => {\n  return (\n    <Card variant=\"outlined\" style={style}>\n      <CardContent>\n        <div>\n          <FlexContainer>\n            <CoinImage src={item.icon} alt={item.name} />\n            <CoinName>{item.name}</CoinName>\n          </FlexContainer>\n          <p>{item.symbol}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","import { CoinCard } from \"components/coin-card/coin-card\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Coin } from \"shared/types/coin\";\n\ninterface CoinCardProps {\n  item: Coin;\n  index: number;\n}\n\nconst grid = 8;\n\nexport const DraggableCard = ({ item, index }: CoinCardProps) => {\n  return (\n    <Draggable key={item.id} draggableId={item.id} index={index}>\n      {(provided, snapshot) => {\n        return (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={{\n              userSelect: \"none\",\n              padding: grid * 0.25,\n              margin: `0 0 ${grid}px 0`,\n              ...provided.draggableProps.style,\n            }}\n          >\n            <CoinCard item={item} style={{backgroundColor: snapshot.isDragging ? \"lightyellow\" : 'white',}} />\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n};\n","import { Droppable } from \"react-beautiful-dnd\";\nimport { Coin } from \"shared/types/coin\";\nimport { getBackgroundColor } from \"shared/lib/getBackgroundColor\";\nimport { Column } from \"components/column/column\";\nimport { Title } from \"components/title/title\";\nimport { DraggableCard } from \"components/draggable-card/draggable-card\";\n\ntype CoinsWatchlistProps = {\n  watchedCoins: Coin[];\n};\n\nexport const CoinsWatchlist = ({ watchedCoins }: CoinsWatchlistProps) => {\n  return (\n    <Droppable droppableId=\"watchlistCoins\">\n      {(provided, snapshot) => (\n        <Column\n          {...provided.droppableProps}\n          ref={provided.innerRef}\n          style={{\n            backgroundColor: getBackgroundColor(snapshot),\n          }}\n        >\n          <Title>Watchlist</Title>\n          {watchedCoins.map((coin, index) => \n            <DraggableCard key={coin.id} item={coin} index={index} />\n          )}\n          {provided.placeholder}\n        </Column>\n      )}\n    </Droppable>\n  );\n};\n","import { Droppable } from \"react-beautiful-dnd\";\nimport { Coin } from \"shared/types/coin\";\nimport { getBackgroundColor } from \"shared/lib/getBackgroundColor\";\nimport { Column } from \"components/column/column\";\nimport { Title } from \"components/title/title\";\nimport { DraggableCard } from \"components/draggable-card/draggable-card\";\n\ntype PossibleCoinsProps = {\n  unwatchedCoins: Coin[];\n};\n\nexport const PossibleCoins = ({ unwatchedCoins }: PossibleCoinsProps) => {\n  return (\n    <Droppable droppableId=\"possibleCoins\">\n      {(provided, snapshot) => (\n        <Column\n          {...provided.droppableProps}\n          ref={provided.innerRef}\n          style={{\n            backgroundColor: getBackgroundColor(snapshot),\n          }}\n        >\n          <Title>Possible Coins</Title>\n          {unwatchedCoins.map((coin, index) => \n            <DraggableCard key={coin.id} item={coin} index={index} />\n          )}\n          {provided.placeholder}\n        </Column>\n      )}\n    </Droppable>\n  );\n};\n","export const COIN_STATS_API = 'https://api.coinstats.app/public/v1';","import { useQuery } from \"@tanstack/react-query\";\nimport { COIN_STATS_API } from \"shared/config/api-config\";\n\nconst fetchCoins = async () => {\n    const response = await fetch(`${COIN_STATS_API}/coins?skip=0&limit=20&currency=USD`);\n\n    if (!response.ok) throw new Error('An error has happened while getting the coins');\n\n    const { coins } = await response.json();\n    return coins;\n}\n\nexport function useCoins<T>() {\n    return useQuery<T>(['coins'], fetchCoins);\n}","import { useQuery } from \"@tanstack/react-query\";\nimport { COIN_STATS_API } from \"shared/config/api-config\";\n\nconst fetchHistorical = (coinId: string) => async () => {\n    const response = await fetch(`${COIN_STATS_API}/charts?period=1y&coinId=${coinId}`);\n\n    if(!response.ok) throw new Error('An error occured while fetching the historical');\n\n    const { chart } = await response.json();\n    return chart;\n}\n\nexport function useCoinHistorical<T>(coinId: string) {\n    return useQuery<T>(['charts', coinId], fetchHistorical(coinId));\n}","import { Line } from 'react-chartjs-2';\nimport { Coin } from \"shared/types/coin\";\nimport { CoinHistorical } from 'shared/types/coin-historical';\nimport { useCoinHistorical } from \"./hooks/useCoinHistorical\";\n\ntype ChartProps = {\n    coin: Coin;\n}\n\nexport const Chart = ({ coin }: ChartProps) => {\n    const { data: chart = [] } = useCoinHistorical<CoinHistorical>(coin.id);\n\n    return (\n        <div>\n            <Line\n                datasetIdKey='id' \n                data={{\n                    labels: chart?.map((array: number[]) => (chart as CoinHistorical)?.indexOf(array)),\n                    datasets: [\n                        {\n                            label: coin.name,\n                            data: chart?.map((m: any) => m[1]),\n                            borderColor: 'rgb(255, 99, 132)',\n                            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                        }\n                    ]\n                }}\n            />\n        </div>\n    );\n};","import { Column } from \"components/column/column\";\nimport { Title } from \"components/title/title\";\nimport { Coin } from \"shared/types/coin\";\nimport { Chart } from \"./components/chart/chart\";\n\ntype CoinChartsProps = {\n  watchlistCoins: Coin[];\n};\n\nexport const CoinCharts = ({ watchlistCoins }: CoinChartsProps) => {\n  return (\n    <Column>\n      <Title>Possible Coins</Title>\n      {watchlistCoins.map((coin) => (\n        <Chart key={coin.id} coin={coin} />\n      ))}\n    </Column>\n  );\n};\n","import { useEffect } from \"react\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { usePersistentState } from \"shared/hooks/usePersistentState\";\nimport { CoinsWatchlist } from \"features/coins-watchlist/coins-watchlist\";\nimport { PossibleCoins } from \"features/possible-coins/possible-coins\";\nimport { Coin } from \"shared/types/coin\";\nimport { isEmpty } from \"shared/lib/isEmpty\";\nimport { useCoins } from \"./hooks/useCoins\";\nimport { CoinCharts } from \"features/coin-charts/coin-charts\";\n\nconst grid = 8;\n\nconst POSSIBLE_COINS_ID = \"possibleCoins\";\nconst WATCHLIST_COINS_ID = \"watchlistCoins\";\n\ntype DroppableId = typeof POSSIBLE_COINS_ID | typeof WATCHLIST_COINS_ID;\n\ninterface DraggableResult extends DropResult {\n  source: { droppableId: DroppableId; index: number };\n  destination: { droppableId: DroppableId; index: number };\n}\n\nexport const CoinWatcherLayout = () => {\n  const { data: coins } = useCoins<Coin[]>();\n  const draggableStates = {\n    [POSSIBLE_COINS_ID]: usePersistentState<Coin[]>(POSSIBLE_COINS_ID, []),\n    [WATCHLIST_COINS_ID]: usePersistentState<Coin[]>(WATCHLIST_COINS_ID, []),\n  };\n\n  const [unwatchedCoins, setUnwatchedCoins] =\n    draggableStates[POSSIBLE_COINS_ID];\n  const [watchedCoins] = draggableStates[WATCHLIST_COINS_ID];\n\n  const moveCoin = (result: DraggableResult) => {\n    const { source, destination } = result;\n    const [sourceState, setSourceState] = draggableStates[source.droppableId];\n    const [destinationState, setDestinationState] = draggableStates[destination.droppableId];\n\n    const newSourceState = [...sourceState];\n    const [movedItem] = newSourceState.splice(source.index, 1);\n    const newDestinationState = [...destinationState]\n    newDestinationState.splice(destination.index, 0, movedItem);\n\n    setSourceState(newSourceState);\n    setDestinationState(newDestinationState);\n  }\n\n  const reorderCoin = (result: DraggableResult) => {\n    const { source, destination } = result;\n\n    const [sourceState, setSourceState] = draggableStates[source.droppableId];\n\n    const newSourceState = [...sourceState];\n    const [movedItem] = newSourceState.splice(source.index, 1);\n    newSourceState.splice(destination.index, 0, movedItem);\n\n    setSourceState(newSourceState);\n  }\n\n  const onDragEnd = (result: DraggableResult) => {\n    const { source, destination } = result;\n\n    if (!destination) return;\n\n    // when the source and destination are not the same the item is being moved\n    const dragItem = source.droppableId === destination.droppableId ? reorderCoin: moveCoin;\n    dragItem(result);\n  };\n\n  useEffect(() => {\n    if (isEmpty(unwatchedCoins) && !isEmpty(coins)) {\n      setUnwatchedCoins(coins!);\n    }\n  }, [coins, unwatchedCoins]);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"row\",\n      }}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <PossibleCoins unwatchedCoins={unwatchedCoins} />\n          <CoinsWatchlist watchedCoins={watchedCoins} />\n        </div>\n      </DragDropContext>\n      <div style={{ padding: grid }}>\n        <CoinCharts watchlistCoins={watchedCoins} />\n      </div>\n    </div>\n  );\n};\n","import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { CoinWatcherLayout } from \"pages/coin-watcher/coin-watcher\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <CoinWatcherLayout />\n    </QueryClientProvider> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}